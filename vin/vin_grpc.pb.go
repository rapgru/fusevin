// Code generated by protoc-gen-go-grpc. DO NOT EDIT.
// versions:
// - protoc-gen-go-grpc v1.2.0
// - protoc             v3.19.3
// source: vin/vin.proto

package vin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// FuseVinClient is the client API for FuseVin service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type FuseVinClient interface {
	// Sends a greeting
	CreatePuppet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CreatePuppetReply, error)
	StartStdinNotify(ctx context.Context, in *StartStdinNotifyRequest, opts ...grpc.CallOption) (FuseVin_StartStdinNotifyClient, error)
	SupplyStdinContent(ctx context.Context, in *StdinContent, opts ...grpc.CallOption) (*Empty, error)
}

type fuseVinClient struct {
	cc grpc.ClientConnInterface
}

func NewFuseVinClient(cc grpc.ClientConnInterface) FuseVinClient {
	return &fuseVinClient{cc}
}

func (c *fuseVinClient) CreatePuppet(ctx context.Context, in *Empty, opts ...grpc.CallOption) (*CreatePuppetReply, error) {
	out := new(CreatePuppetReply)
	err := c.cc.Invoke(ctx, "/vin.FuseVin/CreatePuppet", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *fuseVinClient) StartStdinNotify(ctx context.Context, in *StartStdinNotifyRequest, opts ...grpc.CallOption) (FuseVin_StartStdinNotifyClient, error) {
	stream, err := c.cc.NewStream(ctx, &FuseVin_ServiceDesc.Streams[0], "/vin.FuseVin/StartStdinNotify", opts...)
	if err != nil {
		return nil, err
	}
	x := &fuseVinStartStdinNotifyClient{stream}
	if err := x.ClientStream.SendMsg(in); err != nil {
		return nil, err
	}
	if err := x.ClientStream.CloseSend(); err != nil {
		return nil, err
	}
	return x, nil
}

type FuseVin_StartStdinNotifyClient interface {
	Recv() (*StdinNotify, error)
	grpc.ClientStream
}

type fuseVinStartStdinNotifyClient struct {
	grpc.ClientStream
}

func (x *fuseVinStartStdinNotifyClient) Recv() (*StdinNotify, error) {
	m := new(StdinNotify)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

func (c *fuseVinClient) SupplyStdinContent(ctx context.Context, in *StdinContent, opts ...grpc.CallOption) (*Empty, error) {
	out := new(Empty)
	err := c.cc.Invoke(ctx, "/vin.FuseVin/SupplyStdinContent", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// FuseVinServer is the server API for FuseVin service.
// All implementations must embed UnimplementedFuseVinServer
// for forward compatibility
type FuseVinServer interface {
	// Sends a greeting
	CreatePuppet(context.Context, *Empty) (*CreatePuppetReply, error)
	StartStdinNotify(*StartStdinNotifyRequest, FuseVin_StartStdinNotifyServer) error
	SupplyStdinContent(context.Context, *StdinContent) (*Empty, error)
	mustEmbedUnimplementedFuseVinServer()
}

// UnimplementedFuseVinServer must be embedded to have forward compatible implementations.
type UnimplementedFuseVinServer struct {
}

func (UnimplementedFuseVinServer) CreatePuppet(context.Context, *Empty) (*CreatePuppetReply, error) {
	return nil, status.Errorf(codes.Unimplemented, "method CreatePuppet not implemented")
}
func (UnimplementedFuseVinServer) StartStdinNotify(*StartStdinNotifyRequest, FuseVin_StartStdinNotifyServer) error {
	return status.Errorf(codes.Unimplemented, "method StartStdinNotify not implemented")
}
func (UnimplementedFuseVinServer) SupplyStdinContent(context.Context, *StdinContent) (*Empty, error) {
	return nil, status.Errorf(codes.Unimplemented, "method SupplyStdinContent not implemented")
}
func (UnimplementedFuseVinServer) mustEmbedUnimplementedFuseVinServer() {}

// UnsafeFuseVinServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to FuseVinServer will
// result in compilation errors.
type UnsafeFuseVinServer interface {
	mustEmbedUnimplementedFuseVinServer()
}

func RegisterFuseVinServer(s grpc.ServiceRegistrar, srv FuseVinServer) {
	s.RegisterService(&FuseVin_ServiceDesc, srv)
}

func _FuseVin_CreatePuppet_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Empty)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseVinServer).CreatePuppet(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vin.FuseVin/CreatePuppet",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseVinServer).CreatePuppet(ctx, req.(*Empty))
	}
	return interceptor(ctx, in, info, handler)
}

func _FuseVin_StartStdinNotify_Handler(srv interface{}, stream grpc.ServerStream) error {
	m := new(StartStdinNotifyRequest)
	if err := stream.RecvMsg(m); err != nil {
		return err
	}
	return srv.(FuseVinServer).StartStdinNotify(m, &fuseVinStartStdinNotifyServer{stream})
}

type FuseVin_StartStdinNotifyServer interface {
	Send(*StdinNotify) error
	grpc.ServerStream
}

type fuseVinStartStdinNotifyServer struct {
	grpc.ServerStream
}

func (x *fuseVinStartStdinNotifyServer) Send(m *StdinNotify) error {
	return x.ServerStream.SendMsg(m)
}

func _FuseVin_SupplyStdinContent_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(StdinContent)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(FuseVinServer).SupplyStdinContent(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/vin.FuseVin/SupplyStdinContent",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(FuseVinServer).SupplyStdinContent(ctx, req.(*StdinContent))
	}
	return interceptor(ctx, in, info, handler)
}

// FuseVin_ServiceDesc is the grpc.ServiceDesc for FuseVin service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var FuseVin_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "vin.FuseVin",
	HandlerType: (*FuseVinServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "CreatePuppet",
			Handler:    _FuseVin_CreatePuppet_Handler,
		},
		{
			MethodName: "SupplyStdinContent",
			Handler:    _FuseVin_SupplyStdinContent_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "StartStdinNotify",
			Handler:       _FuseVin_StartStdinNotify_Handler,
			ServerStreams: true,
		},
	},
	Metadata: "vin/vin.proto",
}
